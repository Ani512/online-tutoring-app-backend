/*
 * This file is generated by jOOQ.
 */
package onlinetutoring.com.teamelevenbackend.entity.tables;


import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import onlinetutoring.com.teamelevenbackend.entity.Keys;
import onlinetutoring.com.teamelevenbackend.entity.Public;
import onlinetutoring.com.teamelevenbackend.entity.tables.records.StudentsRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function3;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Students extends TableImpl<StudentsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.students</code>
     */
    public static final Students STUDENTS = new Students();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<StudentsRecord> getRecordType() {
        return StudentsRecord.class;
    }

    /**
     * The column <code>public.students.id</code>.
     */
    public final TableField<StudentsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.students.favourite_tutor_ids</code>.
     */
    public final TableField<StudentsRecord, Integer[]> FAVOURITE_TUTOR_IDS = createField(DSL.name("favourite_tutor_ids"), SQLDataType.INTEGER.getArrayDataType(), this, "");

    /**
     * The column <code>public.students.year</code>.
     */
    public final TableField<StudentsRecord, Integer> YEAR = createField(DSL.name("year"), SQLDataType.INTEGER.nullable(false), this, "");

    private Students(Name alias, Table<StudentsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Students(Name alias, Table<StudentsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.students</code> table reference
     */
    public Students(String alias) {
        this(DSL.name(alias), STUDENTS);
    }

    /**
     * Create an aliased <code>public.students</code> table reference
     */
    public Students(Name alias) {
        this(alias, STUDENTS);
    }

    /**
     * Create a <code>public.students</code> table reference
     */
    public Students() {
        this(DSL.name("students"), null);
    }

    public <O extends Record> Students(Table<O> child, ForeignKey<O, StudentsRecord> key) {
        super(child, key, STUDENTS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<StudentsRecord> getPrimaryKey() {
        return Keys.STUDENTS_PKEY;
    }

    @Override
    public List<ForeignKey<StudentsRecord, ?>> getReferences() {
        return Arrays.asList(Keys.STUDENTS__STUDENTS_ID_FKEY);
    }

    private transient Users _users;

    /**
     * Get the implicit join path to the <code>public.users</code> table.
     */
    public Users users() {
        if (_users == null)
            _users = new Users(this, Keys.STUDENTS__STUDENTS_ID_FKEY);

        return _users;
    }

    @Override
    public List<Check<StudentsRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("four_years_and_default"), "((year = ANY (ARRAY[0, 1, 2, 3, 4])))", true),
            Internal.createCheck(this, DSL.name("not_tutors"), "((checkifnottutor(id) IS TRUE))", true)
        );
    }

    @Override
    public Students as(String alias) {
        return new Students(DSL.name(alias), this);
    }

    @Override
    public Students as(Name alias) {
        return new Students(alias, this);
    }

    @Override
    public Students as(Table<?> alias) {
        return new Students(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(String name) {
        return new Students(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(Name name) {
        return new Students(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Students rename(Table<?> name) {
        return new Students(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer[], Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function3<? super Integer, ? super Integer[], ? super Integer, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function3<? super Integer, ? super Integer[], ? super Integer, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
