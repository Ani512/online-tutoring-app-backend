/*
 * This file is generated by jOOQ.
 */
package onlinetutoring.com.teamelevenbackend.entity.tables.records;


import onlinetutoring.com.teamelevenbackend.entity.tables.Students;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class StudentsRecord extends UpdatableRecordImpl<StudentsRecord> implements Record3<Integer, Integer[], Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.students.id</code>.
     */
    public StudentsRecord setId(Integer value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.students.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>public.students.favourite_tutor_ids</code>.
     */
    public StudentsRecord setFavouriteTutorIds(Integer[] value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.students.favourite_tutor_ids</code>.
     */
    public Integer[] getFavouriteTutorIds() {
        return (Integer[]) get(1);
    }

    /**
     * Setter for <code>public.students.year</code>.
     */
    public StudentsRecord setYear(Integer value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.students.year</code>.
     */
    public Integer getYear() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer[], Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Integer, Integer[], Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Students.STUDENTS.ID;
    }

    @Override
    public Field<Integer[]> field2() {
        return Students.STUDENTS.FAVOURITE_TUTOR_IDS;
    }

    @Override
    public Field<Integer> field3() {
        return Students.STUDENTS.YEAR;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public Integer[] component2() {
        return getFavouriteTutorIds();
    }

    @Override
    public Integer component3() {
        return getYear();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public Integer[] value2() {
        return getFavouriteTutorIds();
    }

    @Override
    public Integer value3() {
        return getYear();
    }

    @Override
    public StudentsRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public StudentsRecord value2(Integer[] value) {
        setFavouriteTutorIds(value);
        return this;
    }

    @Override
    public StudentsRecord value3(Integer value) {
        setYear(value);
        return this;
    }

    @Override
    public StudentsRecord values(Integer value1, Integer[] value2, Integer value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StudentsRecord
     */
    public StudentsRecord() {
        super(Students.STUDENTS);
    }

    /**
     * Create a detached, initialised StudentsRecord
     */
    public StudentsRecord(Integer id, Integer[] favouriteTutorIds, Integer year) {
        super(Students.STUDENTS);

        setId(id);
        setFavouriteTutorIds(favouriteTutorIds);
        setYear(year);
    }

    /**
     * Create a detached, initialised StudentsRecord
     */
    public StudentsRecord(onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Students value) {
        super(Students.STUDENTS);

        if (value != null) {
            setId(value.getId());
            setFavouriteTutorIds(value.getFavouriteTutorIds());
            setYear(value.getYear());
        }
    }
}
