/*
 * This file is generated by jOOQ.
 */
package onlinetutoring.com.teamelevenbackend.entity.tables.daos;


import java.util.List;
import java.util.Optional;

import onlinetutoring.com.teamelevenbackend.entity.tables.Users;
import onlinetutoring.com.teamelevenbackend.entity.tables.records.UsersRecord;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersDao extends DAOImpl<UsersRecord, onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users, Integer> {

    /**
     * Create a new UsersDao without any configuration
     */
    public UsersDao() {
        super(Users.USERS, onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users.class);
    }

    /**
     * Create a new UsersDao with an attached configuration
     */
    public UsersDao(Configuration configuration) {
        super(Users.USERS, onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users.class, configuration);
    }

    @Override
    public Integer getId(onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfId(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchById(Integer... values) {
        return fetch(Users.USERS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users fetchOneById(Integer value) {
        return fetchOne(Users.USERS.ID, value);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public Optional<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchOptionalById(Integer value) {
        return fetchOptional(Users.USERS.ID, value);
    }

    /**
     * Fetch records that have <code>f_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfFName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.F_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>f_name IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchByFName(String... values) {
        return fetch(Users.USERS.F_NAME, values);
    }

    /**
     * Fetch records that have <code>l_name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfLName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.L_NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>l_name IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchByLName(String... values) {
        return fetch(Users.USERS.L_NAME, values);
    }

    /**
     * Fetch records that have <code>email BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfEmail(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.EMAIL, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>email IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchByEmail(String... values) {
        return fetch(Users.USERS.EMAIL, values);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users fetchOneByEmail(String value) {
        return fetchOne(Users.USERS.EMAIL, value);
    }

    /**
     * Fetch a unique record that has <code>email = value</code>
     */
    public Optional<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchOptionalByEmail(String value) {
        return fetchOptional(Users.USERS.EMAIL, value);
    }

    /**
     * Fetch records that have <code>password BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfPassword(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PASSWORD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>password IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchByPassword(String... values) {
        return fetch(Users.USERS.PASSWORD, values);
    }

    /**
     * Fetch records that have <code>total_hours BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfTotalHours(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Users.USERS.TOTAL_HOURS, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>total_hours IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchByTotalHours(Integer... values) {
        return fetch(Users.USERS.TOTAL_HOURS, values);
    }

    /**
     * Fetch records that have <code>tutor BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfTutor(Boolean lowerInclusive, Boolean upperInclusive) {
        return fetchRange(Users.USERS.TUTOR, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>tutor IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchByTutor(Boolean... values) {
        return fetch(Users.USERS.TUTOR, values);
    }

    /**
     * Fetch records that have <code>profile_pic BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfProfilePic(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.PROFILE_PIC, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>profile_pic IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchByProfilePic(String... values) {
        return fetch(Users.USERS.PROFILE_PIC, values);
    }

    /**
     * Fetch a unique record that has <code>profile_pic = value</code>
     */
    public onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users fetchOneByProfilePic(String value) {
        return fetchOne(Users.USERS.PROFILE_PIC, value);
    }

    /**
     * Fetch a unique record that has <code>profile_pic = value</code>
     */
    public Optional<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchOptionalByProfilePic(String value) {
        return fetchOptional(Users.USERS.PROFILE_PIC, value);
    }

    /**
     * Fetch records that have <code>about_me BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchRangeOfAboutMe(String lowerInclusive, String upperInclusive) {
        return fetchRange(Users.USERS.ABOUT_ME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>about_me IN (values)</code>
     */
    public List<onlinetutoring.com.teamelevenbackend.entity.tables.pojos.Users> fetchByAboutMe(String... values) {
        return fetch(Users.USERS.ABOUT_ME, values);
    }
}
