/*
 * This file is generated by jOOQ.
 */
package onlinetutoring.com.teamelevenbackend.entity.tables;


import java.time.LocalTime;
import java.util.Arrays;
import java.util.List;
import java.util.function.Function;

import onlinetutoring.com.teamelevenbackend.entity.Keys;
import onlinetutoring.com.teamelevenbackend.entity.Public;
import onlinetutoring.com.teamelevenbackend.entity.tables.records.AvailableHoursRecord;

import org.jooq.Check;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Function4;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Records;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.SelectField;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AvailableHours extends TableImpl<AvailableHoursRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.available_hours</code>
     */
    public static final AvailableHours AVAILABLE_HOURS = new AvailableHours();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AvailableHoursRecord> getRecordType() {
        return AvailableHoursRecord.class;
    }

    /**
     * The column <code>public.available_hours.tutor_id</code>.
     */
    public final TableField<AvailableHoursRecord, Integer> TUTOR_ID = createField(DSL.name("tutor_id"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.available_hours.start_time</code>.
     */
    public final TableField<AvailableHoursRecord, LocalTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "");

    /**
     * The column <code>public.available_hours.end_time</code>.
     */
    public final TableField<AvailableHoursRecord, LocalTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALTIME(6).nullable(false), this, "");

    /**
     * The column <code>public.available_hours.day_of_week</code>.
     */
    public final TableField<AvailableHoursRecord, String> DAY_OF_WEEK = createField(DSL.name("day_of_week"), SQLDataType.VARCHAR(9).nullable(false), this, "");

    private AvailableHours(Name alias, Table<AvailableHoursRecord> aliased) {
        this(alias, aliased, null);
    }

    private AvailableHours(Name alias, Table<AvailableHoursRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.available_hours</code> table reference
     */
    public AvailableHours(String alias) {
        this(DSL.name(alias), AVAILABLE_HOURS);
    }

    /**
     * Create an aliased <code>public.available_hours</code> table reference
     */
    public AvailableHours(Name alias) {
        this(alias, AVAILABLE_HOURS);
    }

    /**
     * Create a <code>public.available_hours</code> table reference
     */
    public AvailableHours() {
        this(DSL.name("available_hours"), null);
    }

    public <O extends Record> AvailableHours(Table<O> child, ForeignKey<O, AvailableHoursRecord> key) {
        super(child, key, AVAILABLE_HOURS);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<AvailableHoursRecord> getPrimaryKey() {
        return Keys.AVAILABLE_HOURS_PKEY;
    }

    @Override
    public List<ForeignKey<AvailableHoursRecord, ?>> getReferences() {
        return Arrays.asList(Keys.AVAILABLE_HOURS__AVAILABLE_HOURS_TUTOR_ID_FKEY);
    }

    private transient Tutors _tutors;

    /**
     * Get the implicit join path to the <code>public.tutors</code> table.
     */
    public Tutors tutors() {
        if (_tutors == null)
            _tutors = new Tutors(this, Keys.AVAILABLE_HOURS__AVAILABLE_HOURS_TUTOR_ID_FKEY);

        return _tutors;
    }

    @Override
    public List<Check<AvailableHoursRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("day_constraint"), "(((day_of_week)::text = ANY ((ARRAY['sunday'::character varying, 'monday'::character varying, 'tuesday'::character varying, 'wednesday'::character varying, 'thursday'::character varying, 'friday'::character varying, 'saturday'::character varying])::text[])))", true),
            Internal.createCheck(this, DSL.name("time_validator"), "((end_time > start_time))", true)
        );
    }

    @Override
    public AvailableHours as(String alias) {
        return new AvailableHours(DSL.name(alias), this);
    }

    @Override
    public AvailableHours as(Name alias) {
        return new AvailableHours(alias, this);
    }

    @Override
    public AvailableHours as(Table<?> alias) {
        return new AvailableHours(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public AvailableHours rename(String name) {
        return new AvailableHours(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AvailableHours rename(Name name) {
        return new AvailableHours(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public AvailableHours rename(Table<?> name) {
        return new AvailableHours(name.getQualifiedName(), null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalTime, LocalTime, String> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Function)}.
     */
    public <U> SelectField<U> mapping(Function4<? super Integer, ? super LocalTime, ? super LocalTime, ? super String, ? extends U> from) {
        return convertFrom(Records.mapping(from));
    }

    /**
     * Convenience mapping calling {@link SelectField#convertFrom(Class,
     * Function)}.
     */
    public <U> SelectField<U> mapping(Class<U> toType, Function4<? super Integer, ? super LocalTime, ? super LocalTime, ? super String, ? extends U> from) {
        return convertFrom(toType, Records.mapping(from));
    }
}
